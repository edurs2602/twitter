name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_db
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U test_db; do
            sleep 1
          done

      - name: Export DB env vars
        run: |
          echo "POSTGRES_NAME=test_db"       >> $GITHUB_ENV
          echo "POSTGRES_USER=test_db"       >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=password"  >> $GITHUB_ENV
          echo "POSTGRES_HOST=localhost"     >> $GITHUB_ENV
          echo "POSTGRES_PORT=5432"          >> $GITHUB_ENV

      - name: Run Django tests with coverage
        run: |
          coverage run --source='.' manage.py test

      - name: Generate coverage report
        run: |
          coverage report -m
          coverage xml -i

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to AWS EC2 via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            cd /home/${{ secrets.EC2_USER }}/myapp
            git fetch origin
            git checkout ${{ github.ref_name }}
            git pull origin ${{ github.ref_name }}
            source venv/bin/activate
            pip install -r requirements.txt
            # reinicie seu serviÃ§o (ex: systemd, gunicorn, docker, etc.)
            sudo systemctl restart myapp.service
          EOF
